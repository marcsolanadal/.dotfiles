
" ------------------------------------------------------------------------------
" VUNDLE
" ------------------------------------------------------------------------------

" Installing Vundle if it's not in the system.
let vundle_installed = 0
let vundle_readme = expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let vundle_installed = 1
endif

set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Vundle
Bundle 'gmarik/vundle'

" Interface
Bundle 'bling/vim-airline'
Bundle 'christoomey/vim-tmux-navigator'
Bundle 'morhetz/gruvbox'
Bundle 'airblade/vim-gitgutter'

" Workflow
Bundle 'kien/ctrlp.vim'
Bundle 'Shougo/neocomplete.vim'
Bundle 'Shougo/neosnippet.vim'
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-commentary'
Bundle 'jiangmiao/auto-pairs'

" Misc tools
Bundle 'wakatime/vim-wakatime'
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
Bundle 'wikitopian/hardmode'
Bundle 'editorconfig/editorconfig-vim'

" " Clojure
" Bundle 'tpope/vim-fireplace'
" Bundle 'vim-scripts/paredit.vim'
" Bundle 'guns/vim-clojure-static'
" Bundle 'guns/vim-clojure-highlight'
" Bundle 'luochen1990/rainbow'

" Web development
Bundle 'elzr/vim-json'
Bundle 'pangloss/vim-javascript'
Bundle 'jelera/vim-javascript-syntax'
Bundle 'marijnh/tern_for_vim'

if vundle_installed == 1
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :BundleInstall
endif

" ------------------------------------------------------------------------------
" GENERAL
" ------------------------------------------------------------------------------

syntax on                     " Enabling syntax highlighting
filetype plugin indent on     " Enabling indentation

colorscheme gruvbox
set background=dark

set encoding=utf-8            " The encoding displayed
set fileencoding=utf-8        " The encoding written to file

" ------------------------------------------------------------------------------
" Visual
" ------------------------------------------------------------------------------
set t_Co=256                  " Forcing vim acting with 256 color scheme
set term=screen-256color      " Needed to make background not bleed on tmux
set guioptions-=m             " Disable menubar
set guioptions-=T             " Disable toolbar
set guioptions+=LlRrb         " Needed to really disable the scrollbars in gui
set guioptions-=LlRrb         " Disable all scrollbars
"set number                    " Displays the number line
set cursorline                " Displays the line of the cursor
set numberwidth=1             " Min width of the number column to the left
set colorcolumn=81            " Displays a column at 80 chars
set list                      " Show tabs, trail spaces and invisible spaces
set listchars=tab:▸\ ,extends:❯,precedes:❮,nbsp:␣
set showbreak=↪               " Character showed when line break

" ------------------------------------------------------------------------------
" Behaviour
" ------------------------------------------------------------------------------
set scrolloff=5          " Set the scroll to 5 lines of the top/bottom
set hlsearch              " Highlight search terms
set incsearch             " Show search matches as you type

set nobackup              " No backup. File not keeped after write.
set nowritebackup         " No backup. File not created before write.
set noswapfile            " No swap file

set history=1000          " Set history to max of 1000 entries
set undolevels=500        " Use many levels of undo
set visualbell            " Setting the visual bell insted of the sound
set noerrorbells          " No sounds when error

set pastetoggle=<F2>      " Unsing F2 to change to paste mode

set formatoptions+=w
set tw=80
set backspace=indent,eol,start " allow backspacing over everything in insert
set ts=2 sw=2 et

"set expandtab
set smarttab
set shiftwidth=2
set hidden
set laststatus=2
set ignorecase
set ttyfast

"folding settings
set foldmethod=syntax     "fold based on indent
set foldnestmax=10        "deepest fold is 10 levels
set nofoldenable          "dont fold by default
set foldlevel=1           "this is just what i use

set timeoutlen=1000       " Mapping delays
set ttimeoutlen=10        " Key code delays
                          " Solves a problem with ESC key
set relativenumber
" Tern configuration
"let g:tern_map_keys=1
"let g:tern_show_argument_hints='on_hold'

set splitbelow
set splitright

" Omni completion
"set omnifunc=syntaxcomplete#Complete
"set completeopt=menu,preview
set completeopt-=preview

set guifont=Monaco:h12

" Line number color to white
" hi clear CursorLine

"hi CursorLineNr term=bold gui=bold guifg=White
" hi CursorLineNr cterm=bold ctermfg=White
" augroup CLClear
"     autocmd! ColorScheme * hi clear CursorLine
" augroup END

"hi CursorLineNR cterm=bold
" augroup CLNRSet
"     autocmd! ColorScheme * hi CursorLineNR cterm=bold
" augroup END

" ------------------------------------------------------------------------------
" MAPPINGS
" ------------------------------------------------------------------------------

" Leader
"let mapleader = "\\"
let mapleader = ","

" Ergonomy
"nnoremap ; :
"inoremap jk <ESC>

" Learning
"noremap h <NOP>
"noremap j <NOP>
"noremap k <NOP>
"noremap l <NOP>
"
"" Codeflow improvements
"inoremap {<CR> {<CR>}<C-o>O<TAB>
"inoremap [<CR> [<CR>]<C-o>O<TAB>
"inoremap (<CR> (<CR>)<C-o>O<TAB>

" Splits creation
nnoremap <Leader>v :vsplit<CR>
nnoremap <Leader>h :split<CR>

" Navigation tools
nnoremap <Leader>s :e .<CR>
nnoremap <Leader>d :CtrlPBuffer<CR>
nnoremap <Leader>f :CtrlP .<CR>

" Buffer movements
"nnoremap <Leader>d :bp<CR>
"nnoremap <Leader>f :bn<CR>

" Special buffer operations
nnoremap <Leader>q :close<CR>
nnoremap <Leader>w :w!<CR>

" Configuration files
nnoremap <Leader>ev :e $MYVIMRC<CR>
nnoremap <Leader>ez :e ~/.zshrc<CR>
nnoremap <Leader>et :e ~/.tmux.conf<CR>

" Session managment
nnoremap <Silent><Leader>ss :mksession! $HOME/.vim/Session.vim<CR>
nnoremap <Silent><Leader>sl :source $HOME/.vim/Session.vim<CR>

" Misc
inoremap <Leader>oo <C-x><C-o>
nnoremap <Leader>g @=(foldlevel('.')?'za':"\<Space>")<CR>

" Clojure
nnoremap ct :Require! <bar> Eval (clojure.test/run-tests)<CR>

" Build with Grunt
nnoremap <Leader>b :!grunt fullbuild<CR>
nnoremap <Leader>bi :!grunt autoinstall_build<CR>
nnoremap <Leader>bw :!grunt web_build<CR>

" Gulp mlm maps
" nnoremap <Leader>gd :!gulp reset &; sleep 4; gulp populate<CR>
nnoremap <Leader>gp :Dispatch! gulp prepare<CR>
"nnoremap <Leader>gd :Dispatch! gulp deploy<CR>

" Mappings for tmux navigator
if exists('$TMUX')
    let g:tmux_navigator_no_mappings = 1
    nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
    nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
    nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
    nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
    nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>
else
    nnoremap <C-h> <C-w>h
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-l> <C-w>l
endif

" ==============================================================================
" PLUGINS
" ==============================================================================

let g:rainbow_active = 1
let g:rainbow_conf = {
    \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
    \   'ctermfgs': ['blue', 'yellow', 'cyan', 'magenta']}

" -----------------------------------------------------------------------------
" ULTISNIPS
" -----------------------------------------------------------------------------
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories=["~/.dotfiles/ultisnips"]

" -----------------------------------------------------------------------------
" PAREDIT
" -----------------------------------------------------------------------------
"
" Keymaps
" -----------------------------------------------------------------------------
" <leader>W (wrap)
" <leader>S (splice)
" <leader>O (split)
" <leader>J (join)
" <leader>I (raise subforms)
" <leader>< (move parents left)
" <leader>> (move parents right)
"
" Commands
" -----------------------------------------------------------------------------
" g:paredit_mode=0
" g:paredit_electric_return=0
" g:paredit_leader = ','

" ------------------------------------------------------------------------------
" VIM-AIRLINE
" ------------------------------------------------------------------------------

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = 'none'
let g:airline_section_x = ''
let g:airline_section_y = ''
let g:airline#extensions#bufferline#enabled = 1
let g:airline#extensions#bufferline#overwrite_variables = 1
let g:airline_powerline_fonts = 0
let g:airline_left_sep = ''
let g:airline_right_sep = ''

" Trailing whitespace
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = ''
let g:airline#extensions#whitespace#checks = [ 'indent', 'trailing' ]
let g:airline#extensions#whitespace#show_message = 1
let g:airline#extensions#whitespace#trailing_format = 'T: %s'
let g:airline#extensions#whitespace#mixed_indent_format = 'MI: %s'

" ------------------------------------------------------------------------------
" VIM-BUFFERLINE
" ------------------------------------------------------------------------------

" Avoids displaying the bufferline below the statusline.
let g:bufferline_echo = 0

" ------------------------------------------------------------------------------
" SYNTASTIC
" ------------------------------------------------------------------------------

" Checkers
let g:syntastic_javascript_checkers = ['eslint']

" Colors
highlight SyntasticErrorSign guifg=#dc322f guibg=#073642
highlight SignColumn guibg=#073642

" Options
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_signs = 1
let g:syntastic_enable_ballons = 0
let g:syntastic_stl_format = '%E{E: %e}%B{ | }%W{W: %w}'
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'

" -----------------------------------------------------------------------------
" Searching
" ------------------------------------------------------------------------------

" bind K to grep word under cursor
nnoremap \ :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
"command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
"nnoremap \ :Ag<SPACE>"

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'

" To change the default mappings
" let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlP'
"
" Set local working directory
" 'c' - the directory of the current file.
" 'r' - the nearest ancestor that contains one of these directories or
"       files: .git .hg .svn .bzr _darcs
" 'a' - like c, but only if the current working directory outside of CtrlP is
"       not a direct ancestor of the directory of the current file.
" Ignore directories using vim method
" set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
" set wildignore+=*/plugins/*,*/doc/*,*/node_modules/*,*/tmp/*

" ------------------------------------------------------------------------------
" NEOSNIPPET
" ------------------------------------------------------------------------------
" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.dotfiles/vim/snippets'

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif"

" ------------------------------------------------------------------------------
" NEOCOMPLETE
" ------------------------------------------------------------------------------
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0

" Use neocomplete.
let g:neocomplete#enable_at_startup = 1

" Use smartcase.
let g:neocomplete#enable_smart_case = 1

" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
"let g:neocomplete#sources#dictionary#dictionaries = {
"      \ 'default' : '',
"      \ 'vimshell' : $HOME.'/.vimshell_hist',
"      \ 'scheme' : $HOME.'/.gosh_completions'
"      \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()

" Recommended key-mappings.

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>""

" ------------------------------------------------------------------------------
" AUTOCOMMANDS
" ------------------------------------------------------------------------------

" Removes trailing spaces
function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction

if has("autocmd")
    autocmd BufWritePre * :call TrimWhiteSpace()
    autocmd BufNewFile,BufReadPost *.coffee setl shiftwidth=4 expandtab
    autocmd BufNewFile,BufReadPost *.md set filetype=markdown
endif

if has('spell')
    autocmd BufRead,BufNewFile *.md setlocal spell
    autocmd FileType gitcommit setlocal spell
endif

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  "let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  " ag is fast enough that CtrlP doesn't need to cache
  "let g:ctrlp_use_caching = 0
endif



"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/
